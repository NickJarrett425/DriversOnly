Django provides servereal built-in libraries to help with
input validation

Django Forms
  Library: Forms
  Code Example:

    from django import Forms

    ...

    name = forms.CharField(max_length=100)
    email.forms.EmailField()
    age = forms.IntegerField(min_value=0)

Model Validation:
    Libraries: ValidationError & models 
    Code Example:
        name = models.CharField(max_length=100)
        age = models.PositiveIntegerField()

        def clean(self):
            if self.age < 18
                raise ValidationError("Age must be 18 or older.")

Django Validators
    Libary: django.core.validators
    Code Example:
    
        from django.core validators import EmailValidator, MinValueValidator

        ...

        email = models.EmailField(validators=[EmailValidator()])
        age = models.PositiveIntegerField(validators=[MinValueValidator(18)])

Top 10 Most Critical Web Application Security Risks
    1. Injection: Attackers input harmful data to exploit 
        application vulnerabilities.
    2. Broken Authentication: Weak login and session 
        management allow unauthorized access.
    3. Sensitive Data Exposure: Inadequate protection leads 
        to the exposure of private information.
    4. XML External Entity (XXE): Attackers use malicious XML
        to access data or perform actions.
    5. Broken Access Control: Inadequate user access 
        restrictions enable unauthorized actions.
    6. Security Misconfiguration: Poorly configured settings 
        open security gaps.
    7. Cross-Site Scripting (XSS): Malicious scripts are 
        injected into web pages.
    8. Insecure Deserialization: Attackers exploit flaws in 
        data processing.
    9. Using Components with Known Vulnerabilities: Outdated 
        software components are targeted by attackers.
    10. Insufficient Logging and Monitoring: Inadequate 
        monitoring makes it hard to detect and respond to 
        security threats.
